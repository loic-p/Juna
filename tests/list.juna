type list a =
| Empty : list a
| Cons : a -> list a -> list a
end

type pair a b =
| Pair : a -> b -> pair a b
end

let rec print_list_aux = fun l ->
  match l with
  | Empty => print_string "]\n"
  | Cons a b =>
    let x = print_int a in
    let x = print_string " " in
    print_list_aux b
  end
in

let print_list = fun l ->
  let x = print_string "[ " in
  print_list_aux l
in

let rec length = fun l ->
  match l with
  | Empty => 0
  | Cons a b => 1 + (length b)
  end
in

let rec reverse = fun a b ->
  match a with
  | Empty => b
  | Cons x y => reverse y (Cons x b)
  end
in

let rec merge = fun a b ->
  match a with
  | Empty => b
  | Cons xa ya =>
  match b with
  | Empty => a
  | Cons xb yb =>
    match xa < xb with
    | True => Cons xa (merge ya b)
    | False =>  Cons xb (merge a yb)
    end
  end
  end
in

let rec split = fun l1 l2 l3 ->
  match l1 with
  | Empty => Pair l2 l3
  | Cons a b =>
  match b with
  | Empty => Pair (Cons a l2) l3
  | Cons c d => split d (Cons a l2) (Cons c l3)
  end
  end
in

let rec sort = fun l ->
  match l with
  | Empty => l
  | Cons a b =>
  match b with
  | Empty => l
  | Cons c d =>
  match split l Empty Empty with
  | Pair l1 l2 =>
    let l3 = sort l1 in
    let l4 = sort l2 in
    merge l3 l4
  end
  end
  end
in

let list = (Cons 8 (Cons 0 (Cons 3 (Cons 9 (Cons 6 (Cons 1 (Cons 5 (Cons 7 (Cons 4 (Cons 2 Empty)))))))))) in
let x = print_string "List :\n" in
let x = print_list list in
let x = print_string "Reversed :\n" in
let x = print_list (reverse list Empty) in
let x = print_string "Sorted :\n" in
print_list (sort list)
